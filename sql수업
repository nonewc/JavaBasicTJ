관계형 DB와 SQL

기업에서 가장 많이 사용되는 DB

데이터는 2세기의 원유라고 표현, 그 만큼 잠재가치가 크다.

데이터 분석 과정

1.문제인식
2.데이터 수집/가공 (SQL/전처리)
3. 데이터 분석(R/Python)
4. 분석 결과 (보고서/회의)

관계형 데이터 베이스
- 열과 행으로 이루어진 2차원 테이블을 중심으로 설계된 데이터 베이스
테이블들이 key와 관계라는 연결고리로 연결되어있다.

XML 데이터베이스

주로 인터넷에서 데이터를 관리하는 용도로 사용
(파이썬 dict, 자바 map, JS json)

SQL
sql은 관계형 데이터베이스를 조작하기 위해 만든 표준언어
DBMS와 통신하기 위한 언어

사용자 > SQL > DBMS > DB

SQL 특징
1.사용하기 쉽다
2. 절차가 없는 비절차적 언어
3. 관계형 DB 조작
4. 표준언어

SQL의 종류

DML 조작어 Data Manipulation Language
	SELECT,INSERT,UPDATE,DELETE

DDL 정의어 Data Definition Langauge
	CREATE,ALTER,DROP,RENAME

DCL제어어 Data Control Language
	GRANT,REVOKE

TCL 트랜젝션 컨트롤 Transaction Control Language
	COMMIT,ROLLBACK

관계형 데이터베이스의 구성 요소

1) 테이블 뷰 인덱스 등으로 구성된다.
2) 데이터를 저장하고 그 데이터들의 관계의 집합이다.
3) 일관성, 정확성, 신뢰성을 위한 트랜젝션, 무결성등의 개념이 존재한다.

테이블 : 가장 많이 다루는 행과 열로 구성된 저장 단위
	데이터베이스의 다양한 구성 요소 중에서
	데이터를 담는 그릇이라 할 수 있는 테이블을 가장 많이 사용하게 된다.
	데이터 베이스를 한마디로 요약하면 테이블들이 모여있는 집합

SQL Developer
1 접속(좌상) DB 정보 테이블 / 뷰 등의 객체 정보가 계층 형태로 보여진다.
DB의 전체 구조를 알 수 있다.

2보고서(좌하) 데이터 모델링과 구조 보안 성능 등 모니터링과 보고서를 확인하는 영역
주로 DB관리자, 시스템 담당자가 보는 화면으로 초반에는 사용할 일이 거의 없다.

3편집(우상) SQL문을 작성하는 편집 영역이다. 이 창에서 SQL문을 작성하게 된다.
작성할 때 발생되는 문법 오류 등을 알려준다.

4출력(우하) SQL문의 실행 결과등이 출력되는 영역이다.

ALTER USER HR ACCOUNT UNLOCK IDENTIFIED BY 1234;
별도의 ID HR pass 1234 생성

SELECT
데이터를 조회하는 데 필요한 거의 모든 기능을 제공한다.
SELECT을 사용하여 행을 선택하고 열을 선택하고
테이블과 테이블을 연결할 수 있다.
SELECT문은 데이터를 조회하고 분석하는데 가장 기본이며 중요한 SQL 구문이다.

SELECT문은 항상 FROM과 함께 사용된다.
다른 조건 추가가 필요하면 WHERE절에 기속하고
데이터가 출력되는 순서를 조정하려면 ORDER BY를 사용한다.

SELECT (열이름들 or *) ← 가져 올 열들 또는 열 또는 전체
FROM (테이블명)
[WHERE (조건식)] ← 선택
[ORDER BY (열 이름 ASC or DESC)];

1. SQL 구문은 모두 항상 대문자로 입력한다.
2. []안의 항목은 선택사항으로 생략 가능하다.
3. 구문의 끝은 세미콜론을 입력한다. (생략 가능할때도 있다.)
4. 줄은 상관하지 않는다.
5. 들여쓰기도 상관하지 않는다.

SELECT는 데이터를 선택한다는 의미이다.

SELECT * ← 출력하려는 열이 '모든 열' 이라는 의미
FROM employees; ← 어느 테이블로부터 라는 의미

'employees'라는 테이블로부터 모든 열을 조회하라.

SELECT employee_id, first_name, last_name
FROM employees;

SELECT 명령문 뒤에 나열한 열들의 이름 순으로 조회된다.
열들의 이름은,를 사용하여 계속 붙일 수 있다.

모든열 *을 대신하여 모든 열의 이름을 모두 적으면 같은 결과가 나온다.

ORDER BY 열이름 [ASC or DESC] // DESC 내림차순

SELECT employee_id, first_name, last_name
FROM employees
ORDER BY employee_id DESC; ←  employee_id 값을 기준으로 내림차순 정렬

ORDER BY 명령문에 아무것도 지정하지 않으면 오름차순으로 정렬되기 떄문에
ORDER BY employee_id ASC; 와 같다.

ORDER BY 열이름, 열이름 DESC, 열이름ASC 식으로
정렬하고 싶은 열을 계속 지정할 수 있다.

중복값 제거하고 출력 DISTINCT
SELECT DISTINCT job_id
FROM employees;

distinct를 사용하면 데이터 값이 종류별로 하나씩만 출력된 것을 볼 수 있다.


별명 사용하기
SELECT문의 결과를 출력할 때 일반적으로 열 이름은
테이블을 정의할 때 명명한 열의 제목을 출력한다.
원래의 열이름 외의 이름으로 쓰고자 할 때 사용하는것이
별칭(alies)이다.

1) 열 이름을 임시로 변경하는데 사용된다.
 원래 이름이 물리적으로 변경되는 것은 아니다.

2) 별칭은 열 이름 바로 뒤에 사용하며 AS를 사용한다.

3) AS는 생략 가능하다.

SELECT employee_id AS 사원번호, frist_name AS 이름
FROM employees

데이터 값 연결 - 각 열에 따로 담겨 있는 데이터를 하나로 붙이거나
		추가 서식을 붙여 활용할 수 있다
		|| 연결 연사자 2개
		[열 이름] || [열 이름]
		[열 이름] || '문자'

SELECT employee_id, first_name || ' ' || last_name
FROM employees;


데이터 값 끼리 연산

SELECT employee_id, salary, salary +500, salary -100
FROM employees;

조건절을 활용한 데이터 검색 WHERE

행의 특정 데이터 값을 조회하거나 비교하여 연산처리하는 방법
'어디에서 어떻게' 가져올지를 결정한다.
WHERE는 FROM 다음에 위치하며 조건식을 포함한다.

1) 조건을 지정하고
2) FROM 절 다음에 위치한다.
3) 조건절에는 비교연산자 표현식 문자 숫자등을 사용한다.

SELECT  열 이름
FROM 테이블 이름
WHERE 조건;

SELECT *
FROM employees
WHERE employee_id = 100;

SELECT *
FROM employees
WHERE first_name = 'David';

# 'David' 와 'david'는 다른 의미이다.

SELECT *
FROM employees
WHERE employee_id >= 100;

IN 조회하고자 하는 데이터 값이 여러개일떄 사용한다.
  = 과 비슷하지만 = 은 하나만 지정하지만 IN은 여러개를 지정할 수 있다.

SELECT *
FROM employees
WHERE salary IN (10000, 17000, 24000);

LIKE 조건값이 명확하지 않을때 '~와 같은'
1) %와 _ 같은 기호 연산자와 함께 사용된다.
2) 조건에는 문자나 숫자가 포함된다.
3) %는 모든 문자의 의미이고 _는 '한글자'를 의미한다.

SELECT *
FROM employees
WHERE job_id LIKE 'AD%';
# 맨 앞에 AD를 포함하면 뒤에는 몇 개가 오든 어떤 글자가 오든 출력한다.

SELECT *
FROM employees
WHERE job_id LIKE 'AD___';
# 맨 앞에 AD를 포함하고 뒤에는 반드시 세 글자인 데이터만 출력

SELECT *
FROM employees
WHERE manager_id IS NULL;

SELECT *
FROM employees
WHERE salary > 4000
AND job_id = 'IT_PROG';

AND는 주어진 조건들을 모두 만족

SELECT *
FROM employees
WHERE salary > 4000
AND job_id = 'IT_PROG';

OR는 주어진 조건 중 하나라도 만족

NOT != 같지 않다. <> 같지 않다. (ISO 표준)

SELECT *
FROM employees
WHERE job_id != 'IT_PROG';

#함수

입력 → 함수 → 출력
input		output

1) 데이터값을 계산하거나 조작한다.
2) 행의 그룹에 대해 계산하거나 요약한다.

함수에는 단일행 함수와 그룹 함수가 있다.

단일행 함수 : 한번에 하나만 처리
a1값을 처리하고 a2값을 처리

그룹 함수 : 동시에 대상 열 전체 처리
d1,d2,d3,d4 동시에 입력받아서 평균, 합계 등을 출력

그룹함수는 GROUP BY절과 함게 사용된다.

단일행함수에 많이 사용되는 데이터 타입을 보면
CHAR(n) 문자, 고정길이
VARCHAR(n) 문자, 가변길이
숫자 NUMBER()
날짜 DATE

단일행 함수들은 테이블에 존재하는 많은 행들이
한번에 하나씩만 입력되어 하나씩 처리되는 함수이다.

1) 각 행에 대해 수행한다.
2) 각 데이터 타입에 맞는 함수를 사용해야 한다.
3) 행별로 하나의 결과를 반환한다.
4) 중첩해서 사용할 경우 가장 안쪽 단계에서 바깥쪽 단계로 진행된다.

문자 타입함수는 주로 데이터 조작에 쓰이고
문자나 문자열데이터는 작은따옴표('')를 사용하여 표현한다.

lower() 값을 소문자로 변환한다.
	lower('ABCD') → abcd
upper() 값을 대문자로 변환한다.
	upper('abcd' → ABCD
initcap() 첫 글자만 대문자로 변환한다.
	initcap('abcd') → Abcd
substr() 문자열들 중에서 일부분만 선택한다.
	substr('ABC',1,2) → AB
replace() 특정 문자열을 찾아 바꾼다.
	replace('AB','A','E') → EB
concat() 두 문자열을 연결한다. ( || 와 같다.)
	concat('A','B') → AB
length() 문자열의 길이를 구한다.
	length('AB') → 2
instr() 문자의 위치를 구한다.
	instr('ABCD','D') → 4
lpad() 왼쪽부터 특정 문자로 자리를 채운다.
	lpad('ABCD',6,'*') → **ABCD
rpad() 오른쪽부터 특정 문자로 자리를 채운다.
	rpad('ABCD',6,'*') → ABCD**
ltrim() 문자열의 왼쪽 문자를 지운다.
	ltrim('ABCD','AB') → CD
	ltrim('  ABCD',' ') → ABCD
rtrim() 문자열의 오른쪽 문자를 지운다.
	rtrim('ABCD','CD') → AB

SELECT job_id, SUBSTR(job_id, 1,2)
FROM employees;

SUBSTR('문자열',시작위치,길이)

SELECT first_name, lpad 
(first_name, 12, '*')
FROM employees;

TRIM (공백을 모두 제거)
문자열의 중간의 여백은 제거 불가

DUAL
테이블 dummy라는 하나의 열과 X데이터 값을 갖고 있는 테이블이다.
별 의미 없이 테이블을 문법적으로 지정해야만 할 때 사용하는 테이블이다.

#숫자 타입함수
숫자 타입 함수들은 주로 숫자를 계산하거나
계산이 끝난 뒤에 추가로 가공처리를 할 때 사용한다.

round 반올림
	round(15.351,0) → 15
	round(15.351,0) → 16

trunc 숫자를 절삭한다.
	trunc(15.351,1) → 15.3

mod 나누고 나서 나머지만 취한다.
	홀수 짝수 배수
	mod(15,2) → 1

sign 양수(1) 음수(-1) 0인지를 구분한다.
	sign(15)  → 1

반올림 round
1 2 3 . 4 5 6
-3 -2 -1 1 2 3

각 열에 대해 데이터 타입을 규정하고 있다.
따라서 SQL문을 실행하기 위해 데이터 값의 타입을 변환해야 할 때도 있다.
데이터베이스 시스템에 의해 자동으로(암시적으로) 또는 사용자에의
수동으로 (명시적으로) 실행될 수 있다.

자동 형변환

VARCHAR or CHAR → NUMBER
VARCHAR or CHAR → DATE

SELECT 1+ '2'
FROM dual;

'2'는 작은 따옴표로 묶여 있으므로 숫자가 아닌 문자이다.
그럼에도 불구하고 결과는 3이라고 바르게 계산되어 출력되었다.
DBMS이 계산을 위해 문자 '2'를 자동으로 숫자2로 변환하여 계산하였다.
이것을 데이터베이스 시스템에 의한 자동 데이터 타입 변환이라고 한다.
그렇지만 자동 데이터 타입 변환을 이용할 수 있더라도
SQL문의 성능과 안정성을 위해 수동 데이터 타입 변환을 수행하는 것이 좋다.

수동 데이터 타입 변환

TO_CHAR 숫자/ 문자/ 날짜를 VARCHAR로 변환
TO_NUMBER 문자를 숫자로 변환
TO_DATE 형태만 날짜인 문자열을 날짜로 변환

SELECT TO_CHAR(SYSDATE, 'HH:MI:SS PM'),
       TO_CHAR(SYSDATE, 'YYYY/MM/DD HH:MI:SS PM'),
       TO_CHAR(SYSDATE, '"날짜:"YYYY/MM/DD "시각:"HH:MI:SS PM')
FROM dual;


TO_NUMBER 숫자처럼 보이는 문자열을 진짜 숫자데이터타입으로 변환하는 함수

데이터를 조작하거나 프로그래밍 할 때 자주 쓰는 함수들

NOT NULL
특정 열의 행에 대한 데이터 값이 없다면 데이터 값은 NULL이 된다.
테이블을 만들 때 null 값을 가지지 못하도록 지정할 수도 있다.

null의 특징
1) 함수 적용이 불가능한 값이다.
2) 0도 아니고 공백' '도 아니다.
3) null값을 포함하여 계산한 결과는 null이다.

SELECT *
FROM employees
ORDER BY commission_pct;

commission_pct에 대해 오름차순으로 정렬하여 출력된다.
36행부터는 데이터의 값이 null이다.


SELECT salary * NVL(commission_pct,1)
FROM employees
ORDER BY commission_pct;

commission_pct 열의 데이터 값이 null이 아닐때는 그냥 그대로 계산되지만
null일때는 null로 계산하여 처리하면 결과가 null이 나오기 떄문에
NVL함수를 사용하여 null일 경우에는 그 값을 1로 바꾸어 계산한다.

NVL함수는 null값을 어떤 특정한 값으로 변환하여 계산한다.

null 값은 산술계산을 할 떄 논리적인 오류를 일으킬 수 있다.



SELECT COUNT(*) 전체주문건,
        SUM(B.sales) 총매출,
        SUM(DECODE(B.item_id,'M0001',1,0) 전용상품판매량, --M0001을 찾으면 1, 못찾으면 0
        SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출 -- 찾으면 B.sales, 못찾으면 0

FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no;

---

전체주문건	총매출		전용상품판매량	전용상품매출
391		24957000	59		5808000

---

SELECT C.item_id 상품아이디,
        C.product_name 상품이름,
        SUM(B.sales) 상품매출
FROM reservation A, order_info B, item C
WHERE A.reserv_no = B.reserv_no
AND B.item_id = C.item_id
GROUP BY C.item_id, C.product_name
ORDER BY 상품매출 DESC;

---

상품아이디	상품이름	상품매출
M0005		STEAK		9380000
M0001		SPECIAL_SET	5808000
M0006		SALAD_BAR	2075000
M0002		PASTA		1968000
M0003		PIZZA		1666000
M0004		SEA_FOOD	1625000
M0009		WINE		856000
M0008		SANDWICH	610000
M0007		SALAD		525000
M0010		JUICE		444000

---

SELECT SUBSTR(A.reserv_date,1,6) 매출월,
        SUM(DECODE(B.item_id,'M0001',B.sales,0)) M0001,
        SUM(DECODE(B.item_id,'M0002',B.sales,0)) M0002,
        SUM(DECODE(B.item_id,'M0003',B.sales,0)) M0003,
        SUM(DECODE(B.item_id,'M0004',B.sales,0)) M0004,
        SUM(DECODE(B.item_id,'M0005',B.sales,0)) M0005,
        SUM(DECODE(B.item_id,'M0006',B.sales,0)) M0006,
        SUM(DECODE(B.item_id,'M0007',B.sales,0)) M0007,
        SUM(DECODE(B.item_id,'M0008',B.sales,0)) M0008,
        SUM(DECODE(B.item_id,'M0009',B.sales,0)) M0009,
        SUM(DECODE(B.item_id,'M0010',B.sales,0)) M0010


FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no
GROUP BY SUBSTR(A.reserv_date,1,6) -- 월별로 묶음
ORDER BY SUBSTR(A.reserv_date,1,6);


---

매출월	M0001	M0002	M0003	M0004	M0005	M0006	M0007	M0008	M0009	M0010
201706	144000	24000	0	0	385000	0	30000	10000	8000	12000
201707	408000	228000	102000	175000	525000	200000	0	70000	0	36000
201708	336000	108000	136000	225000	455000	175000	15000	90000	40000	42000
201709	264000	120000	238000	300000	280000	200000	90000	30000	16000	48000
201710	552000	336000	391000	200000	1120000	425000	135000	40000	32000	102000
201711	888000	492000	544000	425000	1715000	400000	105000	150000	304000	174000
201712	3216000	660000	255000	300000	4900000	675000	150000	220000	456000	30000

---


SELECT SUBSTR(A.reserv_date,1,6) 매출월,
        SUM(B.sales) 총매출,
        SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출,
        ROUND((sum(DECODE(B.item_id, 'M0001',B.sales,0))/sum(B.sales)*100),2) 매출기여율
        
        

FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no
GROUP BY SUBSTR(A.reserv_date,1,6) -- 월별로 묶음
ORDER BY SUBSTR(A.reserv_date,1,6);



---

매출월	총매출		전용상품매출	매출기여율
201706	613000		144000		23.49
201707	1744000		408000		23.39
201708	1622000		336000		20.72
201709	1586000		264000		16.65
201710	3333000		552000		16.56
201711	5197000		888000		17.09
201712	10862000	3216000		29.61

---

SELECT SUBSTR(A.reserv_date,1,6) 매출월,
        SUM(B.sales) 총매출,
        SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출,
        ROUND((sum(DECODE(B.item_id, 'M0001',B.sales,0))/sum(B.sales)*100),2) 매출기여율,
        COUNT(A.reserv_no) 총예약건,
        SUM(DECODE(A.cancel, 'N',1,0)) 완료건,
        SUM(DECODE(A.cancel, 'Y',1,0)) 예약취소건*****
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no
GROUP BY SUBSTR(A.reserv_date,1,6) -- 월별로 묶음
ORDER BY SUBSTR(A.reserv_date,1,6);

// A.reserv_no = B.reserv_no 를 걸어놨기 때문에 취소건 조회가 안됨
모두 출력하기 위해 외부조인을 넣어줘야함

>> WHERE A.reserv_no = B.reserv_no(+) // 작은쪽에

---

SELECT SUBSTR(A.reserv_date,1,6) 매출월,
        SUM(B.sales) 총매출,
        SUM(B.sales) - SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품외매출,
        SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출,
        ROUND((sum(DECODE(B.item_id, 'M0001',B.sales,0))/sum(B.sales)*100),1) || '%' 전용상품판매율,
        COUNT(A.reserv_no) 총예약건,
        SUM(DECODE(A.cancel, 'N',1,0)) 완료건,
        SUM(DECODE(A.cancel, 'Y',1,0)) 예약취소건,
        ROUND((SUM(DECODE(A.cancel, 'Y',1,0))/COUNT(A.reserv_no))*100,1) || '%'예약취소율
        
        

FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no(+)
GROUP BY SUBSTR(A.reserv_date,1,6) -- 월별로 묶음
ORDER BY SUBSTR(A.reserv_date,1,6);

---

SELECT SUBSTR (reserv_date,1,6) 날짜,
       A.product_name 상품명,
       SUM(DECODE(A.WEEK, '1',A.sales,0)) 일요일,
       SUM(DECODE(A.WEEK, '2',A.sales,0)) 월요일,
       SUM(DECODE(A.WEEK, '3',A.sales,0)) 화요일,
       SUM(DECODE(A.WEEK, '4',A.sales,0)) 수요일,
       SUM(DECODE(A.WEEK, '5',A.sales,0)) 목요일,
       SUM(DECODE(A.WEEK, '6',A.sales,0)) 금요일,
       SUM(DECODE(A.WEEK, '7',A.sales,0)) 토요일

FROM (
        SELECT A.reserv_date, 
               C.product_name,
               TO_CHAR(TO_DATE(A.reserv_date,'YYYYMMDD'),'d') WEEK,
               B.sales
        
        FROM reservation A, order_info B, item C
        WHERE A.reserv_no = B.reserv_no
        AND B.item_id = C.item_id
        AND B.item_id = 'M0001') A

GROUP BY SUBSTR (reserv_date,1,6), A.product_name
ORDER BY SUBSTR (reserv_date,1,6);


---

SELECT *
FROM (
        SELECT SUBSTR(A.reserv_date, 1, 6) 매출월,
            A.branch 지점,
            SUM(B.sales) 전용상품매출,
            RANK() OVER(PARTITION BY SUBSTR(A.reserv_date,1,6)
        ORDER BY SUM(B.sales) DESC) 지점순위
        FROM reservation A, order_info B
        WHERE A.reserv_no = B.reserv_no
        AND A.cancel = 'N'
        AND B.item_ID = 'M0001'
        GROUP BY SUBSTR(A.reserv_date, 1, 6), A.branch
        ORDER BY SUBSTR(A.reserv_date, 1, 6)) A
    WHERE A.지점순위 =1;

---



