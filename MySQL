CREATE DATABASE IF NOT EXISTS `sqldb`

USE `sqldb`;

CREATE TABLE `dept` (
`deptno` INT,
`dname` VARCHAR(14)
`loc` VARCHAR(13)

INSERT INTO `dept` (`DEPTNO`, `DNAME`, `LOC`) VALUES
	(10, 'ACCOUNTING', 'NEW YORK'),
	(20, 'RESEARCH', 'DALLAS'),
	(30, 'SALES', 'CHICAGO'),
	(40, 'OPERATIONS', 'BOSTON'),
	(10, 'ACCOUNTING', 'NEW YORK'),
	(20, 'RESEARCH', 'DALLAS'),
	(30, 'SALES', 'CHICAGO'),
	(40, 'OPERATIONS', 'BOSTON');

CREATE TABLE IF NOT EXISTS `emp` (
  `EMPNO` int NOT NULL,
  `ENAME` varchar(10) DEFAULT NULL,
  `JOB` varchar(9) DEFAULT NULL,
  `MGR` int DEFAULT NULL,
  `HIREDATE` date DEFAULT NULL,
  `SAL` int DEFAULT NULL,
  `COMM` int DEFAULT NULL,
  `DEPTNO` int DEFAULT NULL
)

INSERT INTO `emp` (`EMPNO`, `ENAME`, `JOB`, `MGR`, `HIREDATE`, `SAL`, `COMM`, `DEPTNO`) VALUES
	(7839, 'KING', 'PRESIDENT', NULL, '1981-11-17', 5000, NULL, 10),
	(7698, 'BLAKE', 'MANAGER', 7839, '1981-05-01', 2850, NULL, 30),
	(7782, 'CLARK', 'MANAGER', 7839, '1981-05-09', 2450, NULL, 10),
	(7566, 'JONES', 'MANAGER', 7839, '1981-04-01', 2975, NULL, 20),
	(7654, 'MARTIN', 'SALESMAN', 7698, '1981-09-10', 1250, 1400, 30),
	(7499, 'ALLEN', 'SALESMAN', 7698, '1981-02-11', 1600, 300, 30),
	(7844, 'TURNER', 'SALESMAN', 7698, '1981-08-21', 1500, 0, 30),
	(7900, 'JAMES', 'CLERK', 7698, '1981-12-11', 950, NULL, 30),
	(7521, 'WARD', 'SALESMAN', 7698, '1981-02-23', 1250, 500, 30),
	(7902, 'FORD', 'ANALYST', 7566, '1981-12-11', 3000, NULL, 20),
	(7369, 'SMITH', 'CLERK', 7902, '1980-12-11', 800, NULL, 20),
	(7788, 'SCOTT', 'ANALYST', 7566, '1982-12-22', 3000, NULL, 20),
	(7876, 'ADAMS', 'CLERK', 7788, '1983-01-15', 1100, NULL, 20),
	(7934, 'MILLER', 'CLERK', 7782, '1982-01-11', 1300, NULL, 10);

CREATE TABLE IF NOT EXISTS `salgrade` (
  `grade` int DEFAULT NULL,
  `losal` int DEFAULT NULL,
  `hisal` int DEFAULT NULL
)

INSERT INTO `salgrade` (`grade`, `losal`, `hisal`) VALUES
	(1, 700, 1200),
	(2, 1201, 1400),
	(3, 1401, 2000),
	(4, 2001, 3000),
	(5, 3001, 9999);


#1. 테이블에서 열 선택하기

사원테이블 emp에서 사원번호 이름 월급만 출력하세요

SELECT empno,	ename, sal
	FROM emp;

#2. 사원테이블의 모든 열을 출력하세요.

SELECT *
	FROM emp;

#2-1. dept테이블의 모든 열을 출력하고, deptno를 끝에 한번 더 출력

SELECT *,deptno
	FROM dept;

#3. 컬럼명 별명 사용하기
사원번호 사원이름 급여

SELECT empno AS 사원번호,
		ename AS 사원이름,
		sal AS 급여
FROM emp;

#4 연결하기

이름 ename과 급여 sal를 한 셀에 붙여서 표시하시오.

** ORACLE ONLY
SELECT ename || sal
FROM emp;

SELECT CONCAT(ename,' ',sal)
FROM emp;

#4-1
열이름은 월급
?님의 월급은 ?입니다.

SELECT CONCAT(ename,'님의 월급은 ',sal,'입니다.') AS 월급
FROM emp;

#5 중복제거
emp 테이블에서 job을 중복을 제거하여 출력하시오.

**ORACLE ONLY
SELECT UNIQUE job
FROM emp;

SELECT DISTINCT job
FROM emp;

#6 정렬
emp 테이블에서
이름 부서번호 월급을
부서번호 오름차순
월급 내림차순

SELECT ename,
		deptno,
		sal
FROM emp
ORDER BY deptno ASC, sal DESC;


#7 WHERE

emp 테이블에서
이름 부서번호 월급을
월급이 3000인 사람만 출력

SELECT ename,
		deptno,
		sal
FROM emp
WHERE sal = 3000;

#7-1
입사일이 82년 12월 22일인 사람 출력

SELECT ename,
		deptno,
		sal,
		hiredate
FROM emp
WHERE hiredate = '1982-12-22';

입사일이 82년 12월 22일 이후 사람 출력

SELECT ename,
		deptno,
		sal,
		hiredate
FROM emp
WHERE hiredate >= '1982-12-22';

#9 산술 연산자
연봉이 36000 이상인 사원들의 이름과 연봉을 출력

SELECT ename,
		sal*12 AS 연봉
FROM emp
WHERE sal*12 >= 36000;


#9-1
sal + comm 를 출력하되, null일경우 comm을 0으로 계산하여 출력하시오

SELECT ename, deptno, sal+NVL(comm,0) AS 합계
FROM emp;

#10 BETWEEN AND
월급이 1000에서 3000사이인 사원들의 이름과 월급을 출력

SELECT ename, sal
FROM emp
WHERE sal BETWEEN 1000 AND 3000;


#11 LIKE
이름에서 첫 글자가 S로 시작하는 사원들의 이름과 월급
SELECT ename, sal
FROM emp
WHERE ename LIKE 'S%';

%와일드카드, 이 자리에 어떠한 글자가 몇개가 와도 상관하지 않는다.

#11-1
이름에서 두 번째 글자가 M으로 시작하는 사원들의 이름과 월급을 출력

SELECT ename, sal
FROM emp
WHERE ename LIKE '_M%';

#11-2
이메일 확인을 위해 @가 들어가는지 확인
%@%

#12 null
데이터가 할당되지 않은 상태, 알 수 없는 값
= 연산자는 사용할 수 없다. IS NULL 을 사용한다.

SELECT ename, comm
FROM emp
WHERE comm IS NULL;

ORACLE NVL
mySQL IFNULL

SELECT IFNULL(comm,0) + sal
FROM emp;

#13 IN

직업이 salesman, analyst, manager인 사람들만
이름 월급 직업을 출력하시오

SELECT ename, job, sal
FROM emp
WHERE job IN ('salesman', 'analyst', 'manager');

#14 논리연산

직업이 salesman이고 월급이 1200 이상인 사원들의
이름 월급 직업

SELECT ename, sal, job
FROM emp
WHERE job = 'salesman'
AND sal >= 1200;

#15 함수

단일행함수 - 하나의 행을 입력받아 하나의 행을 반환
다중행함수 - 여러개의 행을 입력받아 하나의 행을 반환

#이름을 전부 대문자로, 전부 소문자로, 첫글자만 대문자로

SELECT UPPER(ename),
	 LOWER(ename),
	 INITCAP(ename) // ORACLE ONLY
		
FROM emp

**mySQL의 경우 INITCAP이 없어서 따로 해줘야 함.

SELECT 
	UPPER(ename) 대문자, 
	LOWER(ename) 소문자,
	CONCAT(UPPER(LEFT(ename,1)), LOWER(SUBSTRING(ename,2))) AS 첫글자대문자
FROM emp;

ORACLE SUBSTR
mySQL SUBSTRING

#이름을 출력하고 그 이름의 글자의 갯수를 출력

SELECT ename 이름,
		LENGTH(ename) 길이
	
FROM emp



# REPLACE
특정 철자를 다른 철자로 변경

SELECT ename 이름, REPLACE(sal,0,'*')
FROM emp;

이름에서 첫 글자만 남기고 나머지는 전부 '*'로 변경

SELECT REPLACE(ename,SUBSTRING(ename,2),'*')
	FROM emp


# 특정 철자를 N개로 채우기

이름과 월급을 출력하는데 월급의 자리수를 10개로 하고
나머지는 '*'로 채워서 출력

SELECT ename 이름, RPAD(sal,10,'*') 월급
	FROM emp

SELECT ename 이름, lPAD(sal,10,'*') 월급
	FROM emp


이름과 월급을 출력하는데
월급 100마다 ■로 표현

SELECT ename 이름, sal, LPAD('■',ROUND(sal/100),'■') 그림
	FROM emp

round(sal/100)이 20이라면 전체 20자리를 확보,
20자리 중 '■'를 하나 출력하고 나머지 19자리에 '■'를 채워서 출력


# round

반올림 - 기본은 소숫점 아래 1자리에서 소숫점 위로 반올림

소숫점 위의 1의 자리에서 반올림

SELECT ename, round(sal,-1)
FROM emp;

# TRUNC ORACLE, TRUNCATE mySQL

SELECT ename, truncate(sal,2)
FROM emp;

SELECT enmae, trunc(sal,-2)
FROM emp;

# mod

사원번호가 홀수이면 1, 짝수이면 0을 출력하세요

SELECT empno, MOD(empno, 2)
FROM emp;

사원번호가 홀수인 사람만 출력

SELECT ename, empno
FROM emp
WHERE MOD(empno,2) = 1;

2의 배수인 사람과 6의 배수인 사람의 명단

SELECT ename, empno
FROM emp
WHERE MOD(empno,2) = 0
OR MOD(empno,6) = 0;

#날짜간 개월수 차이 출력하기

이름을 출력하고 입사일부터 오늘까지 총 몇 달을 근무했는지 출력하세요.

SELECT hiredate 입사일, NOW() 현재날짜,
		TIMESTAMPDIFF(MONTH, hiredate, CURDATE()) 근무월수
FROM emp;

NOW 날짜,시간
CURDATE 날짜
CURTIME 시간

SELECT hiredate 입사일, NOW() 현재날짜,
		TIMESTAMPDIFF(YEAR, hiredate, CURDATE()) 근무년수,
		TIMESTAMPDIFF(MONTH, hiredate, CURDATE()) 근무월수,
		TIMESTAMPDIFF(WEEK, hiredate, CURDATE()) 근무주수,
		TIMESTAMPDIFF(DAY, hiredate, CURDATE()) 근무일수
FROM emp;


# 16 INSERT

CREATE TABLE testtb (
toy_id INT,
toy_name VARCHAR(4),
age INT);

INSERT INTO testtb VALUES (1,'우디',25);

INSERT INTO testtb (toy_id, toy_name) VALUES (2,'버즈') // 일부 열에만 정보 넣기

# 17. 자동증가 AUTO_INCREMENT

1부터 증가하는 값을 자동으로 입력해 준다.
INSERT에서는 열을 생략하고 입력한다.
주의할 점은 AUTO_INCREMENT로 지정하는 열은 반드시
PRIMARY KEY로 지정해야만 한다.

CREATE TABLE testtb2 (
	toy_id INT AUTO_INCREMENT PRIMARY KEY,
	toy_name VARCHAR(4),
	age INT);

INSERT INTO testtb2 VALUES(NULL,'영희',20); // toy_id = 1
INSERT INTO testtb2 VALUES(NULL,'철수',22); // toy_id = 2

ALTER TABLE testtb2 AUTO_INCREMENT = 100;

INSERT INTO testtb2 VALUES(NULL,'태지',24); // toy_id = 100

SET @@AUTO_INCREMENT_increment = 3;

INSERT INTO testtb2 VALUES(NULL,'토마스',25); //toy_id = 103
INSERT INTO testtb2 VALUES(NULL,'마리아',21); //toy_id = 106

# 테이블의 값을 다른 테이블로 입력하기.

SELECT COUNT(*)
	FROM testtb2;

DESC sqldb.testtb2;

SELECT *
	FROM testtb2 LIMIT 3;

CREATE TABLE testtb3 (
	NAME VARCHAR(5),
	age INT);
 
INSERT INTO testtb3
	SELECT toy_name, age
	FROM testtb2

#UPDATE 데이터 수정

UPDATE testtb2
	SET toy_name = '서울'
	WHERE toy_name = '영희';
SELECT * FROM testtb2 WHERE toy_id = 1;

// 여러개도 동시에 바꿀 수 있음
UPDATE testtb2
	SET toy_name = 'SL'
	WHERE toy_name = '서울';
SELECT * FROM testtb2 

//다 바꿀수도 있음
UPDATE testtb3
	SET NAME = '대구';
SELECT * FROM testtb3









